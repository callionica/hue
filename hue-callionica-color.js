// deno-lint-ignore-file no-unused-vars
export class Point {
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
}

// These values set 100K values to the ct values that are used
// by the standard Hue scenes.
const k_ct_friendly = {
    6400: 156, // Used by the Energize scene
    4300: 233, // Used by the Concentrate scene
    2900: 346, // Used by the Read scene
    2700: 367, // Used by the Bright scene
    2200: 447, // Used by the Nightlight scene
};

export function friendlyKToCT(k) {
    const value = k_ct_friendly[k];
    if (value !== undefined) {
        return value;
    }
    return Math.round(1000000/k);
}

const ct_xy = {
    "153": [
        0.312,
        0.328
    ],
    "154": [
        0.3129,
        0.3289
    ],
    "155": [
        0.3136,
        0.3295
    ],
    "156": [
        0.3143,
        0.3301
    ],
    "157": [
        0.315,
        0.3307
    ],
    "158": [
        0.3157,
        0.3313
    ],
    "159": [
        0.3164,
        0.3319
    ],
    "160": [
        0.3171,
        0.3325
    ],
    "161": [
        0.3178,
        0.3331
    ],
    "162": [
        0.3185,
        0.3337
    ],
    "163": [
        0.3192,
        0.3343
    ],
    "164": [
        0.3199,
        0.335
    ],
    "165": [
        0.3206,
        0.3356
    ],
    "166": [
        0.3213,
        0.3362
    ],
    "167": [
        0.322,
        0.3368
    ],
    "168": [
        0.3227,
        0.3374
    ],
    "169": [
        0.3234,
        0.338
    ],
    "170": [
        0.3241,
        0.3386
    ],
    "171": [
        0.3248,
        0.3393
    ],
    "172": [
        0.3255,
        0.3399
    ],
    "173": [
        0.3262,
        0.3405
    ],
    "174": [
        0.3269,
        0.3411
    ],
    "175": [
        0.3276,
        0.3417
    ],
    "176": [
        0.3283,
        0.3423
    ],
    "177": [
        0.329,
        0.3429
    ],
    "178": [
        0.3297,
        0.3434
    ],
    "179": [
        0.3304,
        0.344
    ],
    "180": [
        0.3312,
        0.3445
    ],
    "181": [
        0.3319,
        0.3451
    ],
    "182": [
        0.3326,
        0.3457
    ],
    "183": [
        0.3333,
        0.3462
    ],
    "184": [
        0.334,
        0.3468
    ],
    "185": [
        0.3347,
        0.3473
    ],
    "186": [
        0.3354,
        0.3479
    ],
    "187": [
        0.3361,
        0.3485
    ],
    "188": [
        0.3369,
        0.3491
    ],
    "189": [
        0.3376,
        0.3496
    ],
    "190": [
        0.3383,
        0.3502
    ],
    "191": [
        0.339,
        0.3507
    ],
    "192": [
        0.3397,
        0.3513
    ],
    "193": [
        0.3404,
        0.3519
    ],
    "194": [
        0.3412,
        0.3525
    ],
    "195": [
        0.3419,
        0.353
    ],
    "196": [
        0.3426,
        0.3536
    ],
    "197": [
        0.3433,
        0.3542
    ],
    "198": [
        0.344,
        0.3547
    ],
    "199": [
        0.3448,
        0.3553
    ],
    "200": [
        0.3455,
        0.3559
    ],
    "201": [
        0.3462,
        0.3564
    ],
    "202": [
        0.3469,
        0.3569
    ],
    "203": [
        0.3476,
        0.3574
    ],
    "204": [
        0.3483,
        0.3579
    ],
    "205": [
        0.349,
        0.3584
    ],
    "206": [
        0.3498,
        0.3589
    ],
    "207": [
        0.3505,
        0.3593
    ],
    "208": [
        0.3512,
        0.3599
    ],
    "209": [
        0.3519,
        0.3604
    ],
    "210": [
        0.3526,
        0.3608
    ],
    "211": [
        0.3533,
        0.3613
    ],
    "212": [
        0.354,
        0.3619
    ],
    "213": [
        0.3548,
        0.3624
    ],
    "214": [
        0.3555,
        0.3628
    ],
    "215": [
        0.3562,
        0.3633
    ],
    "216": [
        0.3569,
        0.3639
    ],
    "217": [
        0.3576,
        0.3644
    ],
    "218": [
        0.3583,
        0.3649
    ],
    "219": [
        0.3591,
        0.3654
    ],
    "220": [
        0.3598,
        0.3659
    ],
    "221": [
        0.3605,
        0.3664
    ],
    "222": [
        0.3612,
        0.3669
    ],
    "223": [
        0.362,
        0.3674
    ],
    "224": [
        0.3627,
        0.3679
    ],
    "225": [
        0.3634,
        0.3684
    ],
    "226": [
        0.3641,
        0.3688
    ],
    "227": [
        0.3648,
        0.3693
    ],
    "228": [
        0.3655,
        0.3697
    ],
    "229": [
        0.3662,
        0.3702
    ],
    "230": [
        0.3669,
        0.3706
    ],
    "231": [
        0.3676,
        0.371
    ],
    "232": [
        0.3684,
        0.3715
    ],
    "233": [
        0.3691,
        0.3719
    ],
    "234": [
        0.3698,
        0.3723
    ],
    "235": [
        0.3705,
        0.3728
    ],
    "236": [
        0.3712,
        0.3732
    ],
    "237": [
        0.3719,
        0.3736
    ],
    "238": [
        0.3726,
        0.3741
    ],
    "239": [
        0.3733,
        0.3745
    ],
    "240": [
        0.374,
        0.375
    ],
    "241": [
        0.3747,
        0.3754
    ],
    "242": [
        0.3754,
        0.3758
    ],
    "243": [
        0.3762,
        0.3763
    ],
    "244": [
        0.3769,
        0.3767
    ],
    "245": [
        0.3776,
        0.3772
    ],
    "246": [
        0.3783,
        0.3776
    ],
    "247": [
        0.379,
        0.3781
    ],
    "248": [
        0.3797,
        0.3785
    ],
    "249": [
        0.3804,
        0.3789
    ],
    "250": [
        0.3812,
        0.3794
    ],
    "251": [
        0.3818,
        0.3797
    ],
    "252": [
        0.3825,
        0.3801
    ],
    "253": [
        0.3832,
        0.3805
    ],
    "254": [
        0.3839,
        0.3809
    ],
    "255": [
        0.3846,
        0.3812
    ],
    "256": [
        0.3853,
        0.3816
    ],
    "257": [
        0.386,
        0.382
    ],
    "258": [
        0.3867,
        0.3824
    ],
    "259": [
        0.3874,
        0.3827
    ],
    "260": [
        0.3881,
        0.3831
    ],
    "261": [
        0.3888,
        0.3835
    ],
    "262": [
        0.3895,
        0.3839
    ],
    "263": [
        0.3902,
        0.3842
    ],
    "264": [
        0.3909,
        0.3846
    ],
    "265": [
        0.3916,
        0.385
    ],
    "266": [
        0.3923,
        0.3854
    ],
    "267": [
        0.393,
        0.3857
    ],
    "268": [
        0.3937,
        0.3861
    ],
    "269": [
        0.3944,
        0.3865
    ],
    "270": [
        0.3951,
        0.3869
    ],
    "271": [
        0.3958,
        0.3873
    ],
    "272": [
        0.3965,
        0.3876
    ],
    "273": [
        0.3972,
        0.388
    ],
    "274": [
        0.3979,
        0.3884
    ],
    "275": [
        0.3986,
        0.3888
    ],
    "276": [
        0.3992,
        0.3891
    ],
    "277": [
        0.3999,
        0.3894
    ],
    "278": [
        0.4006,
        0.3897
    ],
    "279": [
        0.4013,
        0.39
    ],
    "280": [
        0.4019,
        0.3903
    ],
    "281": [
        0.4026,
        0.3906
    ],
    "282": [
        0.4033,
        0.3909
    ],
    "283": [
        0.404,
        0.3912
    ],
    "284": [
        0.4046,
        0.3915
    ],
    "285": [
        0.4053,
        0.3918
    ],
    "286": [
        0.406,
        0.3921
    ],
    "287": [
        0.4066,
        0.3924
    ],
    "288": [
        0.4073,
        0.3927
    ],
    "289": [
        0.408,
        0.393
    ],
    "290": [
        0.4087,
        0.3933
    ],
    "291": [
        0.4094,
        0.3936
    ],
    "292": [
        0.41,
        0.394
    ],
    "293": [
        0.4107,
        0.3943
    ],
    "294": [
        0.4114,
        0.3946
    ],
    "295": [
        0.4121,
        0.3949
    ],
    "296": [
        0.4128,
        0.3952
    ],
    "297": [
        0.4134,
        0.3955
    ],
    "298": [
        0.4141,
        0.3958
    ],
    "299": [
        0.4148,
        0.3962
    ],
    "300": [
        0.4155,
        0.3965
    ],
    "301": [
        0.4161,
        0.3967
    ],
    "302": [
        0.4168,
        0.3969
    ],
    "303": [
        0.4174,
        0.3972
    ],
    "304": [
        0.4181,
        0.3974
    ],
    "305": [
        0.4187,
        0.3977
    ],
    "306": [
        0.4194,
        0.3979
    ],
    "307": [
        0.42,
        0.3982
    ],
    "308": [
        0.4207,
        0.3984
    ],
    "309": [
        0.4213,
        0.3987
    ],
    "310": [
        0.422,
        0.3989
    ],
    "311": [
        0.4226,
        0.3991
    ],
    "312": [
        0.4233,
        0.3994
    ],
    "313": [
        0.4239,
        0.3996
    ],
    "314": [
        0.4246,
        0.3999
    ],
    "315": [
        0.4252,
        0.4001
    ],
    "316": [
        0.4259,
        0.4004
    ],
    "317": [
        0.4265,
        0.4006
    ],
    "318": [
        0.4272,
        0.4009
    ],
    "319": [
        0.4278,
        0.4011
    ],
    "320": [
        0.4285,
        0.4013
    ],
    "321": [
        0.4291,
        0.4016
    ],
    "322": [
        0.4298,
        0.4018
    ],
    "323": [
        0.4304,
        0.4021
    ],
    "324": [
        0.4311,
        0.4023
    ],
    "325": [
        0.4317,
        0.4026
    ],
    "326": [
        0.4324,
        0.4027
    ],
    "327": [
        0.433,
        0.4029
    ],
    "328": [
        0.4336,
        0.4031
    ],
    "329": [
        0.4342,
        0.4033
    ],
    "330": [
        0.4349,
        0.4035
    ],
    "331": [
        0.4355,
        0.4037
    ],
    "332": [
        0.4361,
        0.4039
    ],
    "333": [
        0.4368,
        0.4041
    ],
    "334": [
        0.4374,
        0.4043
    ],
    "335": [
        0.438,
        0.4045
    ],
    "336": [
        0.4387,
        0.4047
    ],
    "337": [
        0.4393,
        0.4049
    ],
    "338": [
        0.4399,
        0.4051
    ],
    "339": [
        0.4406,
        0.4053
    ],
    "340": [
        0.4412,
        0.4055
    ],
    "341": [
        0.4418,
        0.4057
    ],
    "342": [
        0.4425,
        0.4059
    ],
    "343": [
        0.4431,
        0.4061
    ],
    "344": [
        0.4437,
        0.4063
    ],
    "345": [
        0.4444,
        0.4065
    ],
    "346": [
        0.445,
        0.4067
    ],
    "347": [
        0.4456,
        0.4069
    ],
    "348": [
        0.4463,
        0.4071
    ],
    "349": [
        0.4469,
        0.4074
    ],
    "350": [
        0.4475,
        0.4076
    ],
    "351": [
        0.4481,
        0.4077
    ],
    "352": [
        0.4487,
        0.4078
    ],
    "353": [
        0.4493,
        0.408
    ],
    "354": [
        0.4499,
        0.4081
    ],
    "355": [
        0.4505,
        0.4083
    ],
    "356": [
        0.4511,
        0.4084
    ],
    "357": [
        0.4517,
        0.4086
    ],
    "358": [
        0.4523,
        0.4087
    ],
    "359": [
        0.4529,
        0.4089
    ],
    "360": [
        0.4535,
        0.409
    ],
    "361": [
        0.4542,
        0.4091
    ],
    "362": [
        0.4547,
        0.4093
    ],
    "363": [
        0.4553,
        0.4094
    ],
    "364": [
        0.456,
        0.4096
    ],
    "365": [
        0.4565,
        0.4097
    ],
    "366": [
        0.4572,
        0.4099
    ],
    "367": [
        0.4578,
        0.41
    ],
    "368": [
        0.4584,
        0.4101
    ],
    "369": [
        0.459,
        0.4103
    ],
    "370": [
        0.4596,
        0.4105
    ],
    "371": [
        0.4602,
        0.4106
    ],
    "372": [
        0.4608,
        0.4108
    ],
    "373": [
        0.4614,
        0.4109
    ],
    "374": [
        0.462,
        0.4111
    ],
    "375": [
        0.4626,
        0.4112
    ],
    "376": [
        0.4632,
        0.4113
    ],
    "377": [
        0.4638,
        0.4114
    ],
    "378": [
        0.4643,
        0.4115
    ],
    "379": [
        0.4649,
        0.4116
    ],
    "380": [
        0.4655,
        0.4117
    ],
    "381": [
        0.4661,
        0.4118
    ],
    "382": [
        0.4667,
        0.4119
    ],
    "383": [
        0.4672,
        0.412
    ],
    "384": [
        0.4678,
        0.4121
    ],
    "385": [
        0.4684,
        0.4122
    ],
    "386": [
        0.469,
        0.4123
    ],
    "387": [
        0.4695,
        0.4124
    ],
    "388": [
        0.4701,
        0.4125
    ],
    "389": [
        0.4707,
        0.4126
    ],
    "390": [
        0.4712,
        0.4127
    ],
    "391": [
        0.4718,
        0.4128
    ],
    "392": [
        0.4724,
        0.4129
    ],
    "393": [
        0.473,
        0.413
    ],
    "394": [
        0.4735,
        0.4131
    ],
    "395": [
        0.4741,
        0.4132
    ],
    "396": [
        0.4747,
        0.4133
    ],
    "397": [
        0.4753,
        0.4134
    ],
    "398": [
        0.4759,
        0.4135
    ],
    "399": [
        0.4764,
        0.4136
    ],
    "400": [
        0.477,
        0.4137
    ],
    "401": [
        0.4775,
        0.4137
    ],
    "402": [
        0.4781,
        0.4138
    ],
    "403": [
        0.4786,
        0.4138
    ],
    "404": [
        0.4792,
        0.4139
    ],
    "405": [
        0.4797,
        0.4139
    ],
    "406": [
        0.4803,
        0.414
    ],
    "407": [
        0.4808,
        0.4141
    ],
    "408": [
        0.4814,
        0.4141
    ],
    "409": [
        0.4819,
        0.4141
    ],
    "410": [
        0.4824,
        0.4142
    ],
    "411": [
        0.483,
        0.4143
    ],
    "412": [
        0.4835,
        0.4143
    ],
    "413": [
        0.4841,
        0.4144
    ],
    "414": [
        0.4846,
        0.4144
    ],
    "415": [
        0.4852,
        0.4145
    ],
    "416": [
        0.4857,
        0.4145
    ],
    "417": [
        0.4862,
        0.4146
    ],
    "418": [
        0.4868,
        0.4146
    ],
    "419": [
        0.4873,
        0.4147
    ],
    "420": [
        0.4879,
        0.4147
    ],
    "421": [
        0.4884,
        0.4148
    ],
    "422": [
        0.489,
        0.4148
    ],
    "423": [
        0.4895,
        0.4149
    ],
    "424": [
        0.49,
        0.4149
    ],
    "425": [
        0.4906,
        0.415
    ],
    "426": [
        0.4911,
        0.415
    ],
    "427": [
        0.4916,
        0.415
    ],
    "428": [
        0.4921,
        0.415
    ],
    "429": [
        0.4926,
        0.415
    ],
    "430": [
        0.4932,
        0.415
    ],
    "431": [
        0.4937,
        0.415
    ],
    "432": [
        0.4942,
        0.4151
    ],
    "433": [
        0.4947,
        0.4151
    ],
    "434": [
        0.4952,
        0.4151
    ],
    "435": [
        0.4957,
        0.4151
    ],
    "436": [
        0.4962,
        0.4151
    ],
    "437": [
        0.4967,
        0.4151
    ],
    "438": [
        0.4972,
        0.4151
    ],
    "439": [
        0.4978,
        0.4151
    ],
    "440": [
        0.4983,
        0.4151
    ],
    "441": [
        0.4988,
        0.4152
    ],
    "442": [
        0.4993,
        0.4152
    ],
    "443": [
        0.4998,
        0.4152
    ],
    "444": [
        0.5003,
        0.4152
    ],
    "445": [
        0.5008,
        0.4152
    ],
    "446": [
        0.5013,
        0.4152
    ],
    "447": [
        0.5019,
        0.4152
    ],
    "448": [
        0.5024,
        0.4152
    ],
    "449": [
        0.5029,
        0.4152
    ],
    "450": [
        0.5034,
        0.4152
    ],
    "451": [
        0.5039,
        0.4152
    ],
    "452": [
        0.5044,
        0.4152
    ],
    "453": [
        0.5048,
        0.4152
    ],
    "454": [
        0.5053,
        0.4152
    ],
    "455": [
        0.5058,
        0.4151
    ],
    "456": [
        0.5063,
        0.4151
    ],
    "457": [
        0.5068,
        0.4151
    ],
    "458": [
        0.5072,
        0.4151
    ],
    "459": [
        0.5077,
        0.415
    ],
    "460": [
        0.5082,
        0.415
    ],
    "461": [
        0.5087,
        0.415
    ],
    "462": [
        0.5092,
        0.415
    ],
    "463": [
        0.5097,
        0.4149
    ],
    "464": [
        0.5101,
        0.4149
    ],
    "465": [
        0.5106,
        0.4149
    ],
    "466": [
        0.5111,
        0.4149
    ],
    "467": [
        0.5116,
        0.4148
    ],
    "468": [
        0.512,
        0.4148
    ],
    "469": [
        0.5125,
        0.4148
    ],
    "470": [
        0.513,
        0.4148
    ],
    "471": [
        0.5135,
        0.4147
    ],
    "472": [
        0.514,
        0.4147
    ],
    "473": [
        0.5144,
        0.4147
    ],
    "474": [
        0.5149,
        0.4147
    ],
    "475": [
        0.5154,
        0.4146
    ],
    "476": [
        0.5159,
        0.4146
    ],
    "477": [
        0.5163,
        0.4145
    ],
    "478": [
        0.5168,
        0.4145
    ],
    "479": [
        0.5172,
        0.4144
    ],
    "480": [
        0.5177,
        0.4144
    ],
    "481": [
        0.5181,
        0.4143
    ],
    "482": [
        0.5186,
        0.4143
    ],
    "483": [
        0.519,
        0.4142
    ],
    "484": [
        0.5195,
        0.4142
    ],
    "485": [
        0.5199,
        0.4141
    ],
    "486": [
        0.5204,
        0.4141
    ],
    "487": [
        0.5208,
        0.414
    ],
    "488": [
        0.5213,
        0.4139
    ],
    "489": [
        0.5217,
        0.4139
    ],
    "490": [
        0.5222,
        0.4138
    ],
    "491": [
        0.5226,
        0.4138
    ],
    "492": [
        0.5231,
        0.4137
    ],
    "493": [
        0.5236,
        0.4137
    ],
    "494": [
        0.524,
        0.4136
    ],
    "495": [
        0.5245,
        0.4136
    ],
    "496": [
        0.5249,
        0.4135
    ],
    "497": [
        0.5253,
        0.4135
    ],
    "498": [
        0.5258,
        0.4134
    ],
    "499": [
        0.5262,
        0.4134
    ],
    "500": [
        0.5267,
        0.4133
    ],
    "501": [
        0.5271,
        0.4132
    ],
    "502": [
        0.5275,
        0.4132
    ],
    "503": [
        0.528,
        0.4131
    ],
    "504": [
        0.5284,
        0.413
    ],
    "505": [
        0.5288,
        0.4129
    ],
    "506": [
        0.5292,
        0.4128
    ],
    "507": [
        0.5297,
        0.4127
    ],
    "508": [
        0.5301,
        0.4127
    ],
    "509": [
        0.5305,
        0.4126
    ],
    "510": [
        0.5309,
        0.4125
    ],
    "511": [
        0.5313,
        0.4124
    ],
    "512": [
        0.5318,
        0.4123
    ],
    "513": [
        0.5322,
        0.4123
    ],
    "514": [
        0.5326,
        0.4122
    ],
    "515": [
        0.533,
        0.4121
    ],
    "516": [
        0.5335,
        0.412
    ],
    "517": [
        0.5339,
        0.4119
    ],
    "518": [
        0.5343,
        0.4119
    ],
    "519": [
        0.5347,
        0.4118
    ],
    "520": [
        0.5351,
        0.4117
    ],
    "521": [
        0.5356,
        0.4116
    ],
    "522": [
        0.536,
        0.4116
    ],
    "523": [
        0.5364,
        0.4115
    ],
    "524": [
        0.5368,
        0.4114
    ],
    "525": [
        0.5372,
        0.4113
    ],
    "526": [
        0.5376,
        0.4112
    ],
    "527": [
        0.538,
        0.4111
    ],
    "529": [
        0.5388,
        0.4109
    ],
    "530": [
        0.5392,
        0.4108
    ],
    "531": [
        0.5396,
        0.4107
    ],
    "532": [
        0.54,
        0.4106
    ],
    "533": [
        0.5404,
        0.4105
    ],
    "534": [
        0.5408,
        0.4104
    ],
    "535": [
        0.5412,
        0.4103
    ],
    "536": [
        0.5416,
        0.4102
    ],
    "537": [
        0.542,
        0.4101
    ],
    "538": [
        0.5424,
        0.41
    ],
    "539": [
        0.5428,
        0.4099
    ],
    "540": [
        0.5432,
        0.4098
    ],
    "541": [
        0.5436,
        0.4097
    ],
    "542": [
        0.544,
        0.4096
    ],
    "543": [
        0.5444,
        0.4095
    ],
    "544": [
        0.5448,
        0.4094
    ],
    "545": [
        0.5452,
        0.4093
    ],
    "546": [
        0.5456,
        0.4092
    ],
    "547": [
        0.546,
        0.4091
    ],
    "548": [
        0.5463,
        0.409
    ],
    "549": [
        0.5467,
        0.4089
    ],
    "550": [
        0.5471,
        0.4088
    ],
    "551": [
        0.5475,
        0.4087
    ],
    "552": [
        0.5479,
        0.4086
    ],
    "553": [
        0.5482,
        0.4085
    ],
    "554": [
        0.5486,
        0.4084
    ],
    "555": [
        0.549,
        0.4082
    ]
};

function xyToCT(xy) {

    function d2(a) {
        const dx = a[0] - xy[0];
        const dy = a[1] - xy[1];
        return dx * dx + dy * dy;
    }

    const closest = Object.entries(ct_xy).map(([ct, xy]) => {
        const dist2 = d2(xy);
        return { ct, dist2 };
    }).reduce((previous, current) => current.dist2 < previous.dist2 ? current : previous).ct;

    return parseInt(closest, 10);
}

function relationOfPointToLine(point, line) {
    const [a, b] = line;
    const slope = (a.y - b.y) / (a.x - b.x);
    const intercept = a.y - slope * a.x;

    const maxY = point.x * slope + intercept;

    if (point.y < maxY) {
        return "below";
    }

    if (maxY < point.y) {
        return "above";
    }

    return "on";
}

function isAbove(point, line) {
    return ["above", "on"].includes(relationOfPointToLine(point, line));
}

function isBelow(point, line) {
    return ["below", "on"].includes(relationOfPointToLine(point, line));
}

function closestPointOnLine(point, line) {
    const [a, b] = line;

    const AP = new Point(point.x - a.x, point.y - a.y);
    const AB = new Point(b.x - a.x, b.y - a.y);

    const ab2 = AB.x * AB.x + AB.y * AB.y;
    const ap_ab = AP.x * AB.x + AP.y * AB.y;

    const t = ap_ab / ab2;

    if (t < 0) {
        t = 0;
    } else if (t > 1) {
        t = 1;
    }

    return new Point(a.x + AB.x * t, a.y + AB.y * t);
}

// The square of the distance because we don't need the actual distance for minimization
function distance2(a, b) {
    const dx = a.x - b.x;
    const dy = a.y - b.y;
    return dx * dx + dy * dy;
}

function distance(a, b) {
    return Math.sqrt(distance2(a, b));
}

export function ctToXY(ct) {
    const mapped = ct_xy[ct];
    if (mapped !== undefined) {
        return new Point(mapped[0], mapped[1]);
    }

    const kelvin = 1000000 / ct;
    let x, y;

    if (kelvin < 4000) {
        x = 11790 +
            57520658 / kelvin +
            -15358885888 / kelvin / kelvin +
            -17440695910400 / kelvin / kelvin / kelvin;
    } else {
        x = 15754 +
            14590587 / kelvin +
            138086835814 / kelvin / kelvin +
            -198301902438400 / kelvin / kelvin / kelvin;
    }
    if (kelvin < 2222) {
        y = -3312 +
            35808 * x / 0x10000 +
            -22087 * x * x / 0x100000000 +
            -18126 * x * x * x / 0x1000000000000;
    } else if (kelvin < 4000) {
        y = -2744 +
            34265 * x / 0x10000 +
            -22514 * x * x / 0x100000000 +
            -15645 * x * x * x / 0x1000000000000;
    } else {
        y = -6062 +
            61458 * x / 0x10000 +
            -96229 * x * x / 0x100000000 +
            50491 * x * x * x / 0x1000000000000;
    }
    y *= 4;
    x /= 0xFFFF;
    y /= 0xFFFF;

    return new Point(Math.round(x * 10000) / 10000, Math.round(y * 10000) / 10000);
}

export function lightXY(light) {
    if (light.state?.colormode === "xy") {
        return new Point(light.state.xy[0], light.state.xy[1]);
    }

    if (light.state?.colormode === "ct") {
        const ct = light.state.ct;
        const unconformed = ctToXY(ct); // This converts directly
        return unconformed;
    }

    return undefined;
}

export function lightCT(light) {
    if (light.state?.colormode === "ct") {
        return light.state.ct;
    }

    if (light.state?.colormode === "xy") {
        const xy = light.state.xy;
        const unconformed = xyToCT(xy);
        return unconformed;
    }

    return undefined;
}

// export class Gamut {
//     constructor(gamut, name){
//         const [pointR, pointG, pointB] = gamut;
//         this.r = new Point(pointR[0], pointR[1]);
//         this.g = new Point(pointG[0], pointG[1]);
//         this.b = new Point(pointB[0], pointB[1]);
//         this.name = name;
//     }

//     contains(point) {
//         const result =
//             isBelow(point, [this.r, this.g]) &&
//             isBelow(point, [this.g, this.b]) &&
//             isAbove(point, [this.b, this.r]);
//         return result;
//     }

//     nearest(point) {
//         if (this.contains(point)) {
//             return point;
//         }

//         const lines = [[this.r, this.g], [this.g, this.b], [this.b, this.r]];

//         const closest = lines.map(line => {
//             const pt = closestPointOnLine(point, line);
//             const dist2 = distance2(point, pt);
//             return { pt, dist2 };
//         }).reduce((previous, current) => current.dist2 < previous.dist2 ? current : previous).pt;

//         return new Point(Math.round(closest.x * 10000) / 10000, Math.round(closest.y * 10000) / 10000);;
//     }

//     nearestFromCT(ct) {
//         const unconformed = ctToXY(ct);
//         const conformed = this.nearest(unconformed);
//         // console.log("ct-xy", ct, unconformed, conformed, this.name);
//         return conformed;
//     }
// }

// const WhiteD65 = new Point(0.312713, 0.329016);

// export const White = new Point(0.322727, 0.32902);

// export const WideGamut = new Gamut([
//     [0.700607, 0.299301],
//     [0.172416, 0.746797],
//     [0.135503, 0.039879]
// ], "WideGamut");


// export function ctToLightXY(ct, light) {
//     const g = light.capabilities?.control?.colorgamut;
//     const gamut = (g !== undefined) ? new Gamut(g, light.name) : WideGamut;
//     const xy = gamut.nearestFromCT(ct);
//     return xy;
// }

// export function xyToLightXY(xy, light) {
//     xy = Array.isArray(xy) ? new Point(xy[0], xy[1]) : xy;
//     const g = light?.capabilities?.control?.colorgamut;
//     const gamut = (g !== undefined) ? new Gamut(g) : WideGamut;
//     const xy2 = gamut.nearest(xy);
//     return xy2;
// }